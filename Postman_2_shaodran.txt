HW_2 Postman

http://162.55.220.72:5005/first
1. Отправить запрос.
// Просто GET запрос http://162.55.220.72:5005/first

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Проверить, что в body приходит правильный string.
pm.test("Body has a correct string", function () {
    pm.response.to.have.body("This is the first responce from server!");
});


http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
// POST запрос с боди из 3-х параметров name, age, salary

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let jsonData = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Response has a name Oleg", function () {
   pm.expect(jsonData.name).to.eql('Oleg');
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)
// Оказывается что у нас возраст приходит текстом, сравним текстовой переменной чтоб "сошлось"
pm.test("Response has an age 34", function () {
   pm.expect(jsonData.age).to.eql('34');
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Response has a salary 1000", function () {
   pm.expect(jsonData.salary).to.eql(1000);
});

7. Спарсить request
let requestjson = request.data;

8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Response has a equal request string name", function () {
   pm.expect(responsejson.name).to.eql(requestjson.name);
});

9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Response has a equal request string age", function () {
   pm.expect(responsejson.age).to.eql(requestjson.age);
});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
// Только здесь обнаружил что реквест у нас идет текстовыми, а респонз содержит salary INT, нужно преобразовать
pm.test("Response has a equal request string salary", function () {
   pm.expect(responsejson.salary).to.eql(+requestjson.salary);
});

11. Вывести в консоль параметр family из response.
console.log(responsejson.family);


12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("Response has a equal request string u_salary_1_5_year", function () {
   pm.expect(responsejson.family.u_salary_1_5_year).to.eql(requestjson.salary*4);
});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
//GET запрос http://162.55.220.72:5005/object_info_3?name=Oleg&age=34&salary=1000

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});


3. Спарсить response body в json.
let responsejson = pm.response.json();

4. Спарсить request.
//реквест у нас в урле, поэтому тащить надо оттуда
let requestdata = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Response has a equal request string name", function () {
   pm.expect(responsejson.name).to.eql(requestdata.name);
});

6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Response has a equal request string age", function () {
   pm.expect(responsejson.age).to.eql(requestdata.age);
});

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Response has a equal request string salary", function () {
   pm.expect(responsejson.salary).to.eql(+requestdata.salary);
});

8. Вывести в консоль параметр family из response.
console.log(responsejson.family);

9. Проверить, что у параметра dog есть параметры name.
pm.test("Response has a string name of the dog", function () {
   pm.expect(responsejson.family.pets.dog).to.have.property("name");
});

10. Проверить, что у параметра dog есть параметры age.
pm.test("Response has a string age of the dog", function () {
   pm.expect(responsejson.family.pets.dog).to.have.property("age");
});

11. Проверить, что параметр name имеет значение Luky.
pm.test("Response has a name of the dog as Luky", function () {
   pm.expect(responsejson.family.pets.dog.name).to.eql("Luky");
});

12. Проверить, что параметр age имеет значение 4.
pm.test("Response has a age of the dog equal 4", function () {
   pm.expect(responsejson.family.pets.dog.age).to.eql(4);
});


http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
// GET запрс на http://162.55.220.72:5005/object_info_4?name=Oleg&age=34&salary=1000

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json
let responsejson = pm.response.json();

4. Спарсить request
let requestdata = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Response has a equal request string name", function () {
   pm.expect(responsejson.name).to.eql(requestdata.name);
});

6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Response has a equal request string age", function () {
   pm.expect(responsejson.age).to.eql(+requestdata.age);
});

7. Вывести в консоль параметр salary из request.
console.log("salary from request = "+requestdata.salary);

8. Вывести в консоль параметр salary из response.
console.log("salary from response = "+responsejson.salary);

9. Вывести в консоль 0-й элемент параметра salary из response.
console.log("Salary #0 from response = "+responsejson.salary[0]);

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log("Salary #1 from response = "+responsejson.salary[1]);

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log("Salary #2 from response = "+responsejson.salary[2]);

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Response has a string salary #0 equal request", function () {
   pm.expect(responsejson.salary[0]).to.eql(+requestdata.salary);
});


13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Response has a string salary #0 equal request*2", function () {
   pm.expect(responsejson.salary[1]).to.eql(+requestdata.salary);
});


14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Response has a string salary #0 equal request*3", function () {
   pm.expect(responsejson.salary[2]).to.eql(+requestdata.salary);
});

15. Создать в окружении переменную name
// Идем в Environment и Add new variable

16. Создать в окружении переменную age
//Там же

17. Создать в окружении переменную salary
//Там же

18. Передать в окружение переменную name
pm.environment.set("name", responsejson.name);

19. Передать в окружение переменную age
pm.environment.set("age", responsejson.age);

20. Передать в окружение переменную salary
pm.environment.set("salary", responsejson.salary[0]);

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
for (var i = 0; i < responsejson.salary.length; i++) console.log("Salary from response #"+i+" ="+responsejson.salary[i]);


http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
// в body запроса указываем в значении value {{salary}}

2. Вставить параметр age из окружения в age
// в body запроса указываем в значении value {{age}}

3. Вставить параметр name из окружения в name
// в body запроса указываем в значении value {{name}}

4. Отправить запрос.
//POST запрос 

5. Статус код 200
pm.test("Status code is 200", function () {
  pm.response.to.have.status(200);
});

6. Спарсить response body в json.
let responsejson = pm.response.json();

7. Спарсить request.
let requestjson = request.data;

8. Проверить, что json response имеет параметр start_qa_salary
pm.test("Body matches string start_qa_salary", function () {
    pm.expect(pm.response.text()).to.include("start_qa_salary");
});

9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Body matches string start_qa_salary", function () {
   pm.expect(responsejson).to.have.property("start_qa_salary")
});

10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Body matches string qa_salary_after_6_months", function () {
   pm.expect(responsejson).to.have.property("qa_salary_after_6_months");
});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Body matches string qa_salary_after_1.5_year", function () {
   pm.expect(responsejson).to.have.property("qa_salary_after_1.5_year");
});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Body matches string qa_salary_after_3.5_year", function () {
   pm.expect(responsejson).to.have.property("qa_salary_after_3.5_year");
});

13. Проверить, что json response имеет параметр person
pm.test("Body matches string qa_salary_after_1.5_year", function () {
   pm.expect(responsejson).to.have.property("qa_salary_after_1.5_year");
});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("Response has a string start_qa_salary equal request's salary", function () {
   pm.expect(responsejson.start_qa_salary).to.eql(+requestjson.salary);
});

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Response has a string qa_salary_after_6_months equal request's salary*2", function () {
   pm.expect(responsejson.qa_salary_after_6_months).to.eql(requestjson.salary*2);
});

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Response has a string qa_salary_after_12_months equal request's salary*2.7", function () {
   pm.expect(responsejson.qa_salary_after_12_months).to.eql(requestjson.salary*2.7);
});

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("Response has a string qa_salary_after_1.5_year equal request's salary*3.3", function () {
   pm.expect(responsejson["qa_salary_after_1.5_year"]).to.eql(requestjson.salary*3.3);
});

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("Response has a string qa_salary_after_3.5_years equal request's salary*3.8", function () {
   pm.expect(responsejson["qa_salary_after_3.5_years"]).to.eql(requestjson.salary*3.8);
});

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("Response has a string uname #1 element equal request's salary", function () {
   pm.expect(responsejson.person.u_name[1]).to.eql(+requestjson.salary);
});

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("Response has a string u_age equal request's age", function () {
   pm.expect(responsejson.person.u_age).to.eql(+requestjson.age);
});

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("Response has a string u_salary_5_years equal request's salary*4.2", function () {
   pm.expect(responsejson.person.u_salary_5_years).to.eql(requestjson.salary*4.2);
});

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for (let i in responsejson.person){
 console.log("Key: "+i+ " = ", responsejson.person[i]);
 }


ДЗ от Толи


1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2
Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). 
P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!
Требования:
1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное
2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное
3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное

1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.

2. http://162.55.220.72:5007/object_info_4
* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary

3. http://162.55.220.72:5005/object_info_3
 Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)

4. http://162.55.220.72:5005/user_info_2
1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)
2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)
3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.